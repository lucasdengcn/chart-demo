---
# Source: chart-demo/charts/order-service-blue/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-order-service-blue
  namespace: demo
  labels:
    helm.sh/chart: order-service-blue-0.1.0
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: chart-demo/charts/order-service-green/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-order-service-green
  namespace: demo
  labels:
    helm.sh/chart: order-service-green-0.1.0
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: chart-demo/charts/payment-service-blue/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-payment-service-blue
  namespace: demo
  labels:
    helm.sh/chart: payment-service-blue-0.1.0
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: chart-demo/charts/order-service-blue/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-order-service-blue-configmap
  namespace: demo
data:
  SV_NAME: "order-service-blue"
  SV_VERSION: "0.1.0"
  SV_APP_PORT: "80"
  SV_NODE_ENV: "DEV"
  KEY_A: "order-serviceA"
  KEY_B: "order-serviceB"
  KEY_JSON: "{\"name\": \"c\", \"d\": \"d1\"}"
  KEY_MUTL: "color.good=purpleA\ncolor.bad=yellowA"
---
# Source: chart-demo/charts/order-service-green/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-order-service-green-configmap
  namespace: demo
data:
  SV_NAME: "order-service-green"
  SV_VERSION: "0.1.0"
  SV_APP_PORT: "80"
  SV_NODE_ENV: "DEV"
  KEY_A: "order-serviceA"
  KEY_B: "order-serviceB"
  KEY_JSON: "{\"name\": \"c\", \"d\": \"d1\"}"
  KEY_MUTL: "color.good=purpleA\ncolor.bad=yellowA"
---
# Source: chart-demo/charts/payment-service-blue/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-payment-service-blue-configmap
  namespace: demo
data:
  SV_NAME: "payment-service-blue"
  SV_VERSION: "0.1.0"
  SV_APP_PORT: "80"
  SV_NODE_ENV: "DEV"
  KEY_A: "order-serviceA"
  KEY_B: "order-serviceB"
  KEY_JSON: "{\"name\": \"c\", \"d\": \"d1\"}"
  KEY_MUTL: "color.good=purpleA\ncolor.bad=yellowA"
---
# Source: chart-demo/charts/order-service-blue/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-order-service-blue
  namespace: demo
  labels:
    helm.sh/chart: order-service-blue-0.1.0
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
---
# Source: chart-demo/charts/order-service-green/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-order-service-green
  namespace: demo
  labels:
    helm.sh/chart: order-service-green-0.1.0
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
---
# Source: chart-demo/charts/payment-service-blue/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-payment-service-blue
  namespace: demo
  labels:
    helm.sh/chart: payment-service-blue-0.1.0
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
---
# Source: chart-demo/charts/order-service-blue/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-order-service-blue
  namespace: demo
  labels:
    helm.sh/chart: order-service-blue-0.1.0
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: order-service-blue
      app.kubernetes.io/instance: demo
  template:
    metadata:
      namespace: demo
      annotations:
        checksum/config: 57ae56797a3b4e41a70bb3381c36aff86a34531026c838fb1fc3d2c5bbb3b00c
        version: blue
      labels:
        helm.sh/chart: order-service-blue-0.1.0
        app.kubernetes.io/name: order-service-blue
        app.kubernetes.io/instance: demo
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
        version: blue
    spec:
      serviceAccountName: demo-order-service-blue
      securityContext:
        {}
      containers:
        - name: order-service-blue
          securityContext:
            {}
          image: "nginx:1.0"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: demo-order-service-blue-configmap
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["order-service-blue"]
            topologyKey: "kubernetes.io/hostname"
---
# Source: chart-demo/charts/order-service-green/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-order-service-green
  namespace: demo
  labels:
    helm.sh/chart: order-service-green-0.1.0
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: order-service-green
      app.kubernetes.io/instance: demo
  template:
    metadata:
      namespace: demo
      annotations:
        checksum/config: b50c930caa2cff1a1d7c0e97f1634ff3f9e107863fbe892b468fcc1cf524ac5f
        version: blue
      labels:
        helm.sh/chart: order-service-green-0.1.0
        app.kubernetes.io/name: order-service-green
        app.kubernetes.io/instance: demo
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
        version: blue
    spec:
      serviceAccountName: demo-order-service-green
      securityContext:
        {}
      containers:
        - name: order-service-green
          securityContext:
            {}
          image: "nginx:1.0"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: demo-order-service-green-configmap
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["order-service-green"]
            topologyKey: "kubernetes.io/hostname"
---
# Source: chart-demo/charts/payment-service-blue/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-payment-service-blue
  namespace: demo
  labels:
    helm.sh/chart: payment-service-blue-0.1.0
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: payment-service-blue
      app.kubernetes.io/instance: demo
  template:
    metadata:
      namespace: demo
      annotations:
        checksum/config: 7c97578f65980d934688dd616c8b49f5f69f0a4e9e83d54a255dd02b3b692e5a
        version: blue
      labels:
        helm.sh/chart: payment-service-blue-0.1.0
        app.kubernetes.io/name: payment-service-blue
        app.kubernetes.io/instance: demo
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
        version: blue
    spec:
      serviceAccountName: demo-payment-service-blue
      securityContext:
        {}
      containers:
        - name: payment-service-blue
          securityContext:
            {}
          image: "nginx:1.0"
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: demo-payment-service-blue-configmap
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["payment-service-blue"]
            topologyKey: "kubernetes.io/hostname"
---
# Source: chart-demo/charts/order-service-blue/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-order-service-blue
  namespace: demo
  labels:
    helm.sh/chart: order-service-blue-0.1.0
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-order-service-blue
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: chart-demo/charts/order-service-green/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-order-service-green
  namespace: demo
  labels:
    helm.sh/chart: order-service-green-0.1.0
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-order-service-green
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: chart-demo/charts/payment-service-blue/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-payment-service-blue
  namespace: demo
  labels:
    helm.sh/chart: payment-service-blue-0.1.0
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-payment-service-blue
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: chart-demo/charts/order-service-blue/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-order-service-blue
  namespace: demo
  labels:
    helm.sh/chart: order-service-blue-0.1.0
    app.kubernetes.io/name: order-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "order-service-example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: demo-order-service-blue
                port:
                  number: 80
---
# Source: chart-demo/charts/order-service-green/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-order-service-green
  namespace: demo
  labels:
    helm.sh/chart: order-service-green-0.1.0
    app.kubernetes.io/name: order-service-green
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "order-service-example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: demo-order-service-green
                port:
                  number: 80
---
# Source: chart-demo/charts/payment-service-blue/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-payment-service-blue
  namespace: demo
  labels:
    helm.sh/chart: payment-service-blue-0.1.0
    app.kubernetes.io/name: payment-service-blue
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "order-service-example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: demo-payment-service-blue
                port:
                  number: 80
---
# Source: chart-demo/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "demo-chart-demo-test-connection"
  labels:
    helm.sh/chart: chart-demo-0.1.0
    app.kubernetes.io/name: chart-demo
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['demo-chart-demo:8080']
  restartPolicy: Never
